{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\sites\\\\github\\\\courses\\\\sermon-outlines\\\\stephen-reynolds-jr\\\\Youth Revelation Study\\\\youth-bible-study\\\\pages\\\\shed.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Head from 'next/head';\nimport styles from '../styles/Home.module.css';\nconst db = {\n  sheds: [{\n    id: 'reynolds-example',\n    deck: {\n      floor: 'advantech',\n      width: 60,\n      length: 144,\n      insulate: false,\n      oncenter: 16,\n      skids: {\n        count: 2\n      }\n    },\n    walls: {\n      a: {\n        length: 144,\n        stud: 72,\n        openings: [{\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }, {\n          type: 'door',\n          style: 'vinyl',\n          width: 61.75,\n          height: 72.5,\n          position: 0,\n          ramp: {\n            width: 52,\n            length: 60\n          }\n        }, {\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }]\n      },\n      b: {\n        length: 144,\n        openings: [{\n          type: 'door',\n          style: 'garage',\n          width: 96,\n          height: 84,\n          top: 84\n        }]\n      },\n      c: {\n        length: 144,\n        openings: [{\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }, {\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }],\n        loft: {\n          width: 36,\n          length: 96\n        }\n      },\n      d: {\n        length: 144,\n        openings: [{\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }, {\n          type: 'window',\n          style: 'standard',\n          width: 18,\n          height: 27,\n          top: 72.5,\n          trim: false,\n          box: false,\n          shutters: false\n        }]\n      },\n      insulate: false,\n      electrical: false\n    },\n    roof: {\n      type: 'gable',\n      insulate: false\n    },\n    siding: {\n      type: 'vinyl',\n      color: 'white'\n    },\n    roof: {\n      type: 'shingle',\n      color: 'black',\n      vent: 'gable'\n    }\n  }]\n};\n\nfunction processOpenings(shed) {\n  const opts = {\n    strokeWidth: 1,\n    wallSize: 6,\n    openingSize: 12,\n    positionOffset: 9\n  };\n  let garageDoors = 0;\n  let walls = [\"a\", \"b\", \"c\", \"d\"];\n  let w = [];\n  walls.map(function (wall) {\n    shed.walls[wall].openings.map(function (v, k) {\n      if (v.type === \"door\" && v.style === \"garage\") {\n        garageDoors++;\n        w.push(wall);\n      }\n\n      let space = {\n        empty: 0,\n        solid: shed.walls[wall].length,\n        spacing: 0\n      };\n      shed.walls[wall].openings && shed.walls[wall].openings.map(function (o) {\n        space.empty = space.empty + o.width;\n        space.solid = space.solid - o.width;\n      });\n      space.spacing = shed.walls[wall].openings && space.solid / (shed.walls[wall].openings.length + 1);\n      let position = 0;\n\n      switch (k) {\n        case 0:\n          position = space.spacing;\n          break;\n\n        case 1:\n          position = space.spacing + shed.walls[wall].openings[0].width + space.spacing;\n          break;\n\n        case 2:\n          position = space.spacing + shed.walls[wall].openings[0].width + space.spacing + shed.walls[wall].openings[1].width + space.spacing;\n          break;\n      }\n\n      let text = \"W\";\n\n      if (v.type === \"door\" && v.style === \"garage\") {\n        text = \"GAR\";\n      } else if (v.type === \"door\") {\n        text = \"DR\";\n      }\n\n      shed.openings = {\n        garageDoors: garageDoors,\n        garageDoorOn: w\n      };\n      shed.walls[wall].openings[k].position = position;\n      shed.walls[wall].openings[k].text = text;\n      shed.walls[wall].space = space;\n\n      switch (wall) {\n        case \"a\":\n          shed.walls[wall].openings[k].drawing = {\n            x: position,\n            y: shed.walls.b.length - opts.wallSize,\n            textx: position + shed.walls[wall].openings[k].width * .3,\n            texty: shed.walls.b.length + opts.wallSize * .5,\n            width: shed.walls[wall].openings[k].width,\n            height: opts.wallSize\n          };\n          break;\n\n        case \"b\":\n          shed.walls[wall].openings[k].drawing = {\n            x: 0,\n            y: position,\n            textx: 0,\n            texty: position + shed.walls[wall].openings[k].width / 2,\n            width: opts.wallSize,\n            height: shed.walls[wall].openings[k].width\n          };\n          break;\n\n        case \"c\":\n          shed.walls[wall].openings[k].drawing = {\n            x: position,\n            y: opts.wallSize * 1 - opts.wallSize,\n            textx: position,\n            texty: opts.wallSize * 2.5 - opts.wallSize,\n            width: shed.walls[wall].openings[k].width,\n            height: opts.wallSize\n          };\n          break;\n\n        case \"d\":\n          shed.walls[wall].openings[k].drawing = {\n            x: shed.walls.b.length - opts.wallSize,\n            y: position,\n            textx: shed.walls.b.length - opts.wallSize * 2,\n            texty: position + shed.walls[wall].openings[k].width * .8,\n            width: opts.wallSize,\n            height: shed.walls[wall].openings[k].width\n          };\n          break;\n      }\n    });\n  });\n  return shed;\n}\n\nfunction processDecks(shed) {\n  {\n    /*Plate Length*/\n  }\n  shed.deck.plates = {\n    length: shed.deck.length\n  };\n  {\n    /*Joists*/\n  }\n  shed.deck.joists = {\n    length: shed.deck.width - 3,\n    count: Math.ceil(shed.deck.length / shed.deck.oncenter + 1) + shed.openings.garageDoors,\n    layout: []\n  };\n  let x = .75;\n\n  while (x < shed.deck.length - .75) {\n    if (x === .75) {\n      shed.deck.joists.layout.push(x);\n\n      if (shed.openings.garageDoorOn.includes('b')) {\n        shed.deck.joists.layout.push(2.25);\n      }\n\n      x = 0;\n    }\n\n    x += shed.deck.oncenter;\n\n    if (x + shed.deck.oncenter >= shed.deck.length) {\n      const diff = shed.deck.length - (x - shed.deck.oncenter);\n      x = shed.deck.length - diff * .5;\n      shed.deck.joists.layout.push(x);\n      break;\n    }\n\n    if (x === shed.deck.length) {\n      x = shed.deck.length - .75;\n    }\n\n    shed.deck.joists.layout.push(x);\n  }\n\n  if (shed.openings.garageDoorOn.includes('d')) {\n    shed.deck.joists.layout.push(shed.deck.length - 2.25);\n  }\n\n  shed.deck.joists.layout.push(shed.deck.length - .75);\n  {\n    /*SKIDS*/\n  }\n\n  if (shed.deck.skids.count === 2) {\n    shed.deck.skids.layout = [{\n      x: 0,\n      y: shed.deck.width / 2 - 36\n    }, {\n      x: 0,\n      y: shed.deck.width / 2 + 36\n    }];\n  } else if (shed.deck.skids.count === 4) {\n    shed.deck.skids.layout = [{\n      x: 0,\n      y: 0\n    }, {\n      x: 0,\n      y: shed.deck.width / 2 - 36\n    }, {\n      x: 0,\n      y: shed.deck.width / 2 + 36\n    }, {\n      x: 0,\n      y: shed.deck.width\n    }];\n  }\n\n  return shed;\n}\n\nfunction data(db) {\n  db.sheds.map(function (val, key) {\n    let shed = processOpenings(val);\n    shed = processDecks(shed);\n    db.sheds[key] = shed;\n  });\n  console.log(db.sheds[0]);\n  return db;\n}\n\nfunction Opening(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: props.opening.drawing.x,\n      y: props.opening.drawing.y,\n      height: props.opening.drawing.height,\n      width: props.opening.drawing.width,\n      stroke: \"gray\",\n      fill: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: props.opening.drawing.textx,\n      y: props.opening.drawing.texty,\n      fill: \"red\",\n      children: props.opening.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true);\n}\n\nconst FloorPlan = function (props) {\n  const opts = {\n    strokeWidth: 1,\n    wallSize: 6,\n    openingSize: 12,\n    positionOffset: 9\n  };\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    height: props.walls.b.length,\n    width: props.walls.a.length,\n    viewBox: \"-10 -1 \" + (props.walls.a.length + 40) + \" \" + props.walls.b.length,\n    \"stroke-width\": opts.strokeWidth,\n    \"stroke-alignment\": \"inner\",\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: opts.wallSize,\n      y: props.walls.b.length - opts.wallSize,\n      height: opts.wallSize,\n      width: props.walls.a.length - opts.wallSize * 2,\n      stroke: \"black\",\n      fill: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: props.walls.a.length * .45,\n      y: props.walls.b.length + 15,\n      fill: \"gray\",\n      children: \"A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 6\n    }, this), props.walls.a.openings.map(function (o, i) {\n      return /*#__PURE__*/_jsxDEV(Opening, {\n        wall: props.walls.a,\n        opening: o,\n        size: opts.openingSize,\n        position: props.walls.b.length - opts.positionOffset\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: \"0\",\n      y: 0,\n      height: props.walls.b.length,\n      width: opts.wallSize,\n      stroke: \"black\",\n      fill: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: -11,\n      y: props.walls.b.length * .45,\n      fill: \"gray\",\n      children: \"B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 6\n    }, this), props.walls.b.openings.map(function (o, i) {\n      return /*#__PURE__*/_jsxDEV(Opening, {\n        wall: props.walls.b,\n        opening: o,\n        size: opts.openingSize,\n        position: 0,\n        horizontal: false\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: opts.wallSize,\n      y: 0,\n      height: opts.wallSize,\n      width: props.walls.c.length - opts.wallSize * 2,\n      stroke: \"black\",\n      fill: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: props.walls.a.length * .45,\n      y: 0,\n      fill: \"gray\",\n      children: \"C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 6\n    }, this), props.walls.c.openings.map(function (o, i) {\n      return /*#__PURE__*/_jsxDEV(Opening, {\n        wall: props.walls.c,\n        opening: o,\n        size: opts.openingSize,\n        position: -3\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: props.walls.a.length - opts.wallSize,\n      y: 0,\n      height: props.walls.d.length,\n      width: opts.wallSize,\n      stroke: \"black\",\n      fill: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: props.walls.a.length + 7,\n      y: props.walls.d.length * .45,\n      fill: \"gray\",\n      children: \"D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 5\n    }, this), props.walls.d.openings.map(function (o, i) {\n      return /*#__PURE__*/_jsxDEV(Opening, {\n        wall: props.walls.d,\n        opening: o,\n        size: opts.openingSize,\n        position: props.walls.a.length - opts.wallSize,\n        horizontal: false\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 11\n  }, this);\n};\n\nconst Deck = function (props) {\n  const opts = {\n    strokeWidth: 1\n  };\n  const joists = [];\n\n  for (var i = 0; i < props.deck.joists.count; i++) {\n    let x = props.deck.joists.layout[i];\n    let sub = .75;\n    joists.push( /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: x - sub,\n      y: 1.5,\n      height: props.deck.width - 1.5,\n      width: 1.5,\n      stroke: \"black\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 16\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    height: props.deck.width,\n    width: props.deck.length,\n    viewBox: \"-10 -1 \" + (props.deck.length + 40) + \" \" + props.deck.width,\n    \"stroke-width\": opts.strokeWidth,\n    \"stroke-alignment\": \"inner\",\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: 0,\n      y: props.deck.width,\n      height: 1.5,\n      width: props.deck.length,\n      stroke: \"black\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n      x: 0,\n      y: 0,\n      height: 1.5,\n      width: props.deck.length,\n      stroke: \"black\",\n      fill: \"none\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 6\n    }, this), joists, props.deck.skids.layout.map(function (skid) {\n      /*#__PURE__*/\n      _jsxDEV(\"rect\", {\n        x: skid.x,\n        y: skid.y,\n        height: 3.5,\n        width: props.deck.length,\n        stroke: \"black\",\n        fill: \"gray\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 4\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 11\n  }, this);\n};\n\nconst WorkOrder = function (props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Work Order (\", props.shed.id, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DECK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), \"Size: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.shed.deck.width / 12\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 15\n    }, this), \" (w) x \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: props.shed.deck.length / 12\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 76\n    }, this), \" (l) \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 136\n    }, this), \"Insulate: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      value: props.shed.deck.insulate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this), \"Plate Length: \", props.shed.deck.plates.length, \"\\\"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }, this), \"Joists Length: \", props.shed.deck.joists.length, \"\\\"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this), \"Joists Count: \", props.shed.deck.joists.count, \"\\\"\", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Walls\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      children: JSON.stringify(props.shed)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 347,\n    columnNumber: 11\n  }, this);\n};\n\nexport default function Shed() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Shed Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        rel: \"icon\",\n        href: \"/favicon.ico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.main,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: styles.title,\n        children: \"Shed Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.description,\n        children: \"Work Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.grid,\n        children: data(db).sheds.map(function (shed) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.card,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: shed.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [shed.walls.b.length / 12, \"' x \", shed.walls.a.length / 12, \"'\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Deck, _objectSpread({}, shed), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FloorPlan, _objectSpread({}, shed), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(WorkOrder, {\n              shed: shed\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: styles.footer,\n      children: \"Created by Stephen Reynolds, Jr.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/sites/github/courses/sermon-outlines/stephen-reynolds-jr/Youth Revelation Study/youth-bible-study/pages/shed.js"],"names":["Head","styles","db","sheds","id","deck","floor","width","length","insulate","oncenter","skids","count","walls","a","stud","openings","type","style","height","top","trim","box","shutters","position","ramp","b","c","loft","d","electrical","roof","siding","color","vent","processOpenings","shed","opts","strokeWidth","wallSize","openingSize","positionOffset","garageDoors","w","map","wall","v","k","push","space","empty","solid","spacing","o","text","garageDoorOn","drawing","x","y","textx","texty","processDecks","plates","joists","Math","ceil","layout","includes","diff","data","val","key","console","log","Opening","props","opening","FloorPlan","i","Deck","sub","skid","WorkOrder","JSON","stringify","Shed","container","main","title","description","grid","card","footer"],"mappings":"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","sourcesContent":["import Head from 'next/head'\nimport styles from '../styles/Home.module.css'\n\nconst db = {\n  sheds : [\n    {\n      id:'reynolds-example',\n      deck:{\n        floor:'advantech',\n        width:60,\n        length:144,\n        insulate: false,\n        oncenter:16,\n        skids:{count:2}\n      },\n      walls:{\n        a: {\n        length:144,\n        stud:72,        \n        openings:[\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false},\n          {type:'door', style:'vinyl', width: 61.75, height:72.5, position: 0, ramp:{width:52, length:60}},\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false}\n        ]\n        },\n        b: {\n          length:144,        \n          openings:[\n            {type:'door', style: 'garage', width:96, height:84, top:84}\n          ]},\n        c:{length:144,        \n        openings:[\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false},\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false}\n        ], loft:{width:36, length: 96}},\n        d:{length:144,        \n        openings:[\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false},\n          {type:'window', style: 'standard', width:18, height:27, top:72.5, trim: false, box:false, shutters: false}\n        ]},\n        insulate: false,\n        electrical: false\n      },\n      roof: {\n        type:'gable',\n        insulate:false\n      },\n      siding: {\n        type:'vinyl',\n        color:'white'\n      },\n      roof:{\n        type: 'shingle',\n        color: 'black',\n        vent: 'gable'\n      }\n    \n    }\n  ]\n  }\n\nfunction processOpenings(shed){\n\n\t  const opts = {\n\t    strokeWidth:1,\n\t    wallSize: 6,\n\t    openingSize: 12,\n\t    positionOffset:9\n\t  }\n\n\tlet garageDoors = 0\n\tlet walls = [\"a\",\"b\",\"c\",\"d\"]\n\tlet w = []\n\n    walls.map(function(wall){\n\t\tshed.walls[wall].openings.map(function(v,k){\n\t\t\t\n\t\t\tif(v.type === \"door\" && v.style===\"garage\"){\n\t\t\t\tgarageDoors++;\n\t\t\t\tw.push(wall)\n\t\t\t}\n\n\t\t\t    let space = {\n\t\t\t      empty: 0,\n\t\t\t      solid: shed.walls[wall].length,\n\t\t\t      spacing: 0\n\t\t\t    };\n\n\t\t\t    shed.walls[wall].openings && shed.walls[wall].openings.map(function(o){\n\t\t\t      space.empty = space.empty + o.width\n\t\t\t      space.solid = space.solid-o.width\n\t\t\t    }) \n\n\t\t\t    space.spacing = shed.walls[wall].openings && space.solid/(shed.walls[wall].openings.length+1)\n\n\t\t\t    let position = 0\n\n\t\t\t      switch(k){\n\n\t\t\t        case 0:\n\t\t\t          position = space.spacing\n\t\t\t          break;\n\n\t\t\t        case 1:\n\t\t\t          position = space.spacing + shed.walls[wall].openings[0].width + space.spacing\n\t\t\t          break;\n\n\t\t\t        case 2:\n\t\t\t          position = space.spacing + shed.walls[wall].openings[0].width + space.spacing + shed.walls[wall].openings[1].width+ space.spacing\n\t\t\t          break;\n\t\t\t      }\n\t\t\t    \n\n\t\t\t  let text = \"W\"\n\n\t\t      if(v.type === \"door\" && v.style === \"garage\"){\n\t\t        text = \"GAR\"\n\t\t      }else if(v.type === \"door\"){\n\t\t      \ttext = \"DR\"\n\t\t      }\n\n\t\t    shed.openings = {\n\t\t    \tgarageDoors: garageDoors,\n\t\t    \tgarageDoorOn: w\n\t\t    }\n\n\t\t\tshed.walls[wall].openings[k].position = position\n\t\t\tshed.walls[wall].openings[k].text = text\n\t\t\tshed.walls[wall].space = space\n\n\t\t\tswitch(wall){\n\t\t\t\tcase \"a\":\n\t\t\t\t\tshed.walls[wall].openings[k].drawing = {\n\t\t\t\t\t\tx:position, \n\t\t\t\t\t\ty:shed.walls.b.length-opts.wallSize, \n\t\t\t\t\t\ttextx:position+(shed.walls[wall].openings[k].width*.3), \n\t\t\t\t\t\ttexty:shed.walls.b.length+(opts.wallSize*.5),\n\t\t\t\t\t\twidth: shed.walls[wall].openings[k].width,\n\t\t\t\t\t\theight: opts.wallSize\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"b\":\n\t\t\t\t\tshed.walls[wall].openings[k].drawing = {\n\t\t\t\t\t\tx:0, \n\t\t\t\t\t\ty:position, \n\t\t\t\t\t\ttextx:0, \n\t\t\t\t\t\ttexty:position+(shed.walls[wall].openings[k].width/2),\n\t\t\t\t\t\twidth: opts.wallSize,\n\t\t\t\t\t\theight: shed.walls[wall].openings[k].width}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"c\":\n\t\t\t\t\tshed.walls[wall].openings[k].drawing = {\n\t\t\t\t\t\tx:position, \n\t\t\t\t\t\ty:(opts.wallSize*1)-opts.wallSize, \n\t\t\t\t\t\ttextx:position, \n\t\t\t\t\t\ttexty:(opts.wallSize*2.5)-opts.wallSize,\n\t\t\t\t\t\twidth: shed.walls[wall].openings[k].width,\n\t\t\t\t\t\theight: opts.wallSize\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"d\":\n\t\t\t\t\tshed.walls[wall].openings[k].drawing = {\n\t\t\t\t\t\tx:shed.walls.b.length-opts.wallSize,\n\t\t\t\t\t\ty:position, \n\t\t\t\t\t\ttextx:shed.walls.b.length-(opts.wallSize*2), \n\t\t\t\t\t\ttexty:position+(shed.walls[wall].openings[k].width*.8),\n\t\t\t\t\t\twidth: opts.wallSize,\n\t\t\t\t\t\theight: shed.walls[wall].openings[k].width\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t})\n\t})\n\n\treturn shed\n}\n\nfunction processDecks(shed){\n\n\t\t{/*Plate Length*/}\n\t\tshed.deck.plates = {length: shed.deck.length}\n   \t\t{/*Joists*/}\n        shed.deck.joists = {\n        \tlength: shed.deck.width-3,\n        \tcount: Math.ceil((shed.deck.length/shed.deck.oncenter)+1) + shed.openings.garageDoors,\n        \tlayout: []\n        }\n\n\t\t  let x = .75\n\t\t  \n\t\t  while (x < shed.deck.length-.75){\n\t\t  \t\n\t\t  \t\n\t\t  \tif(x === .75){\n\n\t\t\t\tshed.deck.joists.layout.push(x)\n\n\t\t\t\tif(shed.openings.garageDoorOn.includes('b')){\n\t\t\t\t\tshed.deck.joists.layout.push(2.25)\n\t\t\t\t}\n\t\t\t\tx = 0\n\t\t  \t}\n\n\t\t  \tx += shed.deck.oncenter\n\n\t\t  \tif(x+shed.deck.oncenter >= shed.deck.length){ \n\t\t  \t\tconst diff = shed.deck.length-(x-shed.deck.oncenter)\t\n\t\t  \t\tx = shed.deck.length - (diff*.5)\n\t\t  \t\tshed.deck.joists.layout.push(x)\n\t\t  \t\tbreak;\n\t\t  \t}\n\n\t\t  \tif(x === shed.deck.length){\n\t\t  \t\tx = shed.deck.length-.75\n\t\t  \t}\n\n\t\t  \tshed.deck.joists.layout.push(x)\n\t\t  }    \n\n\t\tif(shed.openings.garageDoorOn.includes('d') ){\n\t\t\tshed.deck.joists.layout.push(shed.deck.length-2.25)\n\t\t}\n\n\t\tshed.deck.joists.layout.push(shed.deck.length-.75)\n\n\t\t{/*SKIDS*/}\n\n\t\tif(shed.deck.skids.count === 2){\n\t\t\tshed.deck.skids.layout = [\n\t\t\t\t{x: 0, y: (shed.deck.width/2)-36},\n\t\t\t\t{x: 0, y: (shed.deck.width/2)+36} \n\t\t\t]\n\t\t\t\n\t\t}else if(shed.deck.skids.count === 4){\n\t\t\tshed.deck.skids.layout = [\n\t\t\t\t{x: 0, y: 0},\n\t\t\t\t{x: 0, y: (shed.deck.width/2)-36},\n\t\t\t\t{x: 0, y: (shed.deck.width/2)+36} ,\n\t\t\t\t{x: 0, y: shed.deck.width} \n\t\t\t]\n\t\t}\n\n\t\treturn shed\n}\n\nfunction data(db){\n\n\n\tdb.sheds.map(function(val, key){\n\t\tlet shed = processOpenings(val)\n\t\tshed = processDecks(shed)\n\t\tdb.sheds[key] = shed\n\t})\n\n\tconsole.log(db.sheds[0])\n\treturn db\n}\n\nfunction Opening(props){\n\n return (<><rect x={props.opening.drawing.x} y={props.opening.drawing.y} height={props.opening.drawing.height} width={props.opening.drawing.width} stroke=\"gray\" fill=\"white\"/>\n              <text x={props.opening.drawing.textx} y={props.opening.drawing.texty} fill=\"red\">{props.opening.text}</text></>)\n\n}\n\nconst FloorPlan = function(props) {\n\n\t  const opts = {\n\t    strokeWidth:1,\n\t    wallSize: 6,\n\t    openingSize: 12,\n\t    positionOffset:9\n\t  }\n\n  return (<svg height={props.walls.b.length} width={props.walls.a.length} viewBox={\"-10 -1 \"+ (props.walls.a.length + 40) + \" \" + (props.walls.b.length)} \n    stroke-width={opts.strokeWidth}\n    stroke-alignment=\"inner\"\n    >\n\n     <rect x={opts.wallSize} y={props.walls.b.length-opts.wallSize} height={opts.wallSize} width={props.walls.a.length-(opts.wallSize*2)} stroke=\"black\" fill=\"black\"/>\n     <text x={props.walls.a.length*.45} y={props.walls.b.length+15} fill=\"gray\">A</text>\n     {props.walls.a.openings.map(function(o,i){\n        return <Opening wall={props.walls.a} opening={o} key={i} size={opts.openingSize} position={props.walls.b.length-opts.positionOffset} />\n     })}\n\n     <rect x=\"0\" y={0} height={props.walls.b.length} width={opts.wallSize} stroke=\"black\" fill=\"black\"/>\n     <text x={-11} y={props.walls.b.length*.45} fill=\"gray\">B</text>\n      {props.walls.b.openings.map(function(o,i){\n        return <Opening wall={props.walls.b} opening={o} key={i} size={opts.openingSize} position={0} horizontal={false}/>\n      })}\n\n     <rect x={opts.wallSize} y={0} height={opts.wallSize} width={props.walls.c.length-(opts.wallSize*2)} stroke=\"black\" fill=\"black\"/>\n     <text x={props.walls.a.length*.45} y={0} fill=\"gray\">C</text>\n    {props.walls.c.openings.map(function(o,i){\n        return <Opening wall={props.walls.c} opening={o} key={i} size={opts.openingSize} position={-3} />\n     })}\n\n     <rect x={props.walls.a.length-(opts.wallSize)} y={0} height={props.walls.d.length} width={opts.wallSize} stroke=\"black\" fill=\"black\"/>\n    <text x={props.walls.a.length+7} y={props.walls.d.length*.45} fill=\"gray\">D</text>\n    {props.walls.d.openings.map(function(o,i){\n        return <Opening wall={props.walls.d} opening={o} key={i} size={opts.openingSize} position={props.walls.a.length-(opts.wallSize)} horizontal={false}/>\n      })}\n\n  </svg>)\n}\n\nconst Deck = function(props) {\n\n  const opts = {\n    strokeWidth:1\n  }\n\n  const joists = []\n \n for (var i = 0; i < props.deck.joists.count; i++) {\n \tlet x = props.deck.joists.layout[i]\n \tlet sub = .75\n  \tjoists.push(<rect x={x-sub} y={1.5} height={props.deck.width-1.5} width={1.5} stroke=\"black\" fill=\"none\"/>)\n }\n\n  return (<svg height={props.deck.width} width={props.deck.length} viewBox={\"-10 -1 \"+ (props.deck.length + 40) + \" \" + (props.deck.width)} \n    stroke-width={opts.strokeWidth}\n    stroke-alignment=\"inner\"\n    >\n\t{/*PLATES*/}\n     <rect x={0} y={props.deck.width} height={1.5} width={props.deck.length} stroke=\"black\" fill=\"none\"/>\n     <rect x={0} y={0} height={1.5} width={props.deck.length} stroke=\"black\" fill=\"none\"/>\n\n \t{/*JOISTS*/}\n     {joists}\n\n \t{/*SKIDS*/}\n \t{props.deck.skids.layout.map(function(skid){\n \t\t<rect x={skid.x} y={skid.y} height={3.5} width={props.deck.length} stroke=\"black\" fill=\"gray\"/>\n \t})}\n     \n  </svg>)\n}\n\nconst WorkOrder = function(props) {\n\n  return (<div>\n      <h1>Work Order ({props.shed.id})</h1>\n\n      <h2>DECK</h2>\n        Size: <input type=\"text\" value={props.shed.deck.width/12} /> (w) x <input type=\"text\" value={props.shed.deck.length/12} /> (l) <br/>\n        Insulate: <input type=\"checkbox\" value={props.shed.deck.insulate} />\n        <br/>\n        Plate Length: {props.shed.deck.plates.length}\"\n        <br/>\n        Joists Length: {props.shed.deck.joists.length}\"\n        <br/>\n        Joists Count: {props.shed.deck.joists.count}\"\n\n      <h2>Walls</h2>\n\n    \t<textarea>{JSON.stringify(props.shed)}</textarea>\n    </div>)\n}\n\nexport default function Shed() {\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Shed Assistant</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>\n          Shed Assistant\n        </h1>\n\n        <p className={styles.description}>\n          Work Orders\n        </p>\n\n        <div className={styles.grid}>\n\n          {\n            data(db).sheds.map(function(shed){\n              return (          \n              <div className={styles.card}>\n                <h3>{shed.id}</h3>\n                <p>{shed.walls.b.length/12}' x {shed.walls.a.length/12}'</p>\n                <hr/>\n                <Deck {...shed}/>\n                <FloorPlan {...shed}/>\n                <hr/>\n                <WorkOrder shed={shed} />\n\n              </div>\n          )\n            })\n          }\n\n\n\n        </div>\n      </main>\n\n      <footer className={styles.footer}>\n        Created by Stephen Reynolds, Jr.\n      </footer>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}